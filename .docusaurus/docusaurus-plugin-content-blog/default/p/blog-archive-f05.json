{"archive":{"blogPosts":[{"id":"/2023/11/04/skript","metadata":{"permalink":"/blog/2023/11/04/skript","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-11-04-skript.md","source":"@site/blog/2023-11-04-skript.md","title":"skript","description":"Einrichtung .NET Maui","date":"2023-11-04T00:00:00.000Z","tags":[],"readingTime":1.075,"hasTruncateMarker":false,"authors":[{"name":"Marius Hau","key":null,"page":null}],"frontMatter":{"date":"2023-11-04T00:00:00.000Z","author":"Marius Hau","title":"skript"},"unlisted":false,"nextItem":{"title":"null-werte","permalink":"/blog/2023/10/24/null-werte"}},"content":"## Einrichtung .NET Maui\r\n\r\n### 1. Toolkit bei Abhängigkeiten hinzufügen (CommunityToolkit.Mvvm)\r\n\r\n### 2. Erstellen des ViewModels Ordner .cs erstellen (.CS DATEI MainViewModel NENNEN)\r\n```cs\r\n\r\npublic partial class MainViewModel : ObservableObject\r\n{\r\n// [ObservableProperty] bei Eigenschaften oben drüber, Relay Command bei Methoden\r\n}\r\n```\r\n\r\n\r\n### 3. Mainpage.xaml einrichten\r\n\r\n```cs\r\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:viemodels=\"clr-namespace:xxx.MainViewModel\" // Wichtig //Projektname statt xxx\r\n             x:Class=\"xxx.MainPage\" // Wichtig //xxx statt Projektname\r\n             x:DataType=\"viemodels:xxx\" // Wichtig //xxx statt .cs Datei MainViewModel (Ordername ist immer ViewModels)\r\n             Shell.NavBarIsVisible=\"False\"> // Wichtig \r\n        \r\n\r\n// 1 von 3 auswählen: Grid, Horizontalstack Layout, Verticalstack Layout\r\n// RowDefinitions, Column Definitions\r\n// Label, Entry, Button\r\n\r\n    <Grid RowDefinitions=\"Auto,Auto,Auto,Auto\" ColumnDefinitions=\"120,*\">\r\n        <Label Text=\"Rechner\" Margin=\"10\" HorizontalTextAlignment=\"Center\" FontSize=\"Large\" TextColor=\"{StaticResource Primary}\" Grid.ColumnSpan=\"2\" />\r\n\r\n        <Label Text=\"{Binding Feedback}\" Grid.Row=\"1\" Grid.ColumnSpan=\"2\" TextColor=\"{StaticResource Tertiary}\" FontSize=\"Medium\" Padding=\"5\"></Label>\r\n\r\n        <Label Margin=\"5\" Text=\"Angabe\" Grid.Row=\"2\" ></Label>\r\n        <Label Margin=\"5\" Text=\"{Binding Angabe}\" Grid.Row=\"2\" Grid.Column=\"1\"></Label>\r\n\r\n        <Label Margin=\"5\" Text=\"Eingabe\" Grid.Row=\"3\"></Label>\r\n        <Entry Margin=\"5\" Text=\"{Binding Eingabe}\" Keyboard=\"Numeric\"  Grid.Row=\"3\" Grid.Column=\"1\" ReturnCommand=\"{Binding CheckCommand}\"  ></Entry>//Binding CheckCommand für den Zugriff einer Eigenschaft aus der ViewModel.cs\r\n    </Grid>\r\n</ContentPage>\r\n```\r\n\r\n### 4. MainPage.xaml.cs einrichten (alles löschen und Code schreiben) (using hinzufügen und strg . auf MainViewModel)\r\n```cs\r\nnamespace Projektname;\r\nusing Projektname.ViewModels // ViewModels = Ordername\r\n\r\npublic partial class MainPage : ContentPage\r\n{\r\n  public MainPage(MainViewModel viewModel)\r\n  {\r\n    InitializeComponent();\r\n    this.BindingContext = viewModel;\r\n  }\r\n}\r\n```\r\n\r\n### 5. MauiProgram.cs bearbeiten\r\n```cs\r\nbuilder.Services.AddSingleton<MainViewModel>(); // in der eckigen Klammer .cs Dateiname im ViewModels-Ordner\r\nbuilder.Services.AddSingleton<MainPage>():\r\n```\r\n\r\n\r\n##"},{"id":"/2023/10/24/null-werte","metadata":{"permalink":"/blog/2023/10/24/null-werte","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-10-24-null-werte.md","source":"@site/blog/2023-10-24-null-werte.md","title":"null-werte","description":"Ein Null-Wert in C# ist ein spezieller Wert, der anzeigt, dass eine Variable oder ein Objekt keinen gültigen Wert oder","date":"2023-11-03T00:00:00.000Z","tags":[],"readingTime":0.635,"hasTruncateMarker":false,"authors":[{"name":"Marius Hau","key":null,"page":null}],"frontMatter":{"date":"2023-11-03T00:00:00.000Z","author":"Marius Hau","title":"null-werte"},"unlisted":false,"prevItem":{"title":"skript","permalink":"/blog/2023/11/04/skript"},"nextItem":{"title":"Schnittstellen","permalink":"/blog/2023/10/26/schnittstellen"}},"content":"Ein **Null-Wert** in C# ist ein spezieller Wert, der anzeigt, dass eine Variable oder ein Objekt *keinen* gültigen Wert oder\r\nVerweis enthält. \r\n\r\nFakten zu Null-Werten:\r\n- Ein **Null-Wert** zeigt an, dass keine Daten oder Objekte vorhanden sind oder dass etwas nicht initialisiert wurde\r\n- In C# wird der **Null-Wert** durch das Schlüsselwort *null* dargestellt\r\n- Die Verwendung von **Null-Werten** in C# ermöglicht es, auf fehlende oder nicht initialisierte Daten oder Objekte flexibel zu reagieren und *Fehler zu vermeiden*\r\n\r\n```cs\r\nPerson p = null;\r\n\r\nif (p == null)\r\n{\r\n    Console.WriteLine(\"Diese Person ist nicht bekannt\");\r\n}\r\nelse\r\n{\r\n    Console.WriteLine(\"Vorname: {0}\", p.Firstname);\r\n}\r\n\r\nPerson p2 = new Person(\"Manfred\", \"Muster\");\r\nConsole.WriteLine(\"Person p2 - Vorname: {0}\",p2.Firstname);\r\n```\r\n\r\n:::Danger\r\nint i = 0; ist nicht das gleiche wie int i = null;\r\n:::"},{"id":"/2023/10/26/schnittstellen","metadata":{"permalink":"/blog/2023/10/26/schnittstellen","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-10-26-schnittstellen.md","source":"@site/blog/2023-10-26-schnittstellen.md","title":"Schnittstellen","description":"Eine Schnittstelle ist eine abstrakte Struktur, die definiert, welche Methoden und Eigenschaften eine Klasse implementieren muss, um bestimmte Funktionalitäten bereitzustellen.","date":"2023-10-24T00:00:00.000Z","tags":[],"readingTime":0.56,"hasTruncateMarker":false,"authors":[{"name":"Marius Hau","key":null,"page":null}],"frontMatter":{"date":"2023-10-24T00:00:00.000Z","author":"Marius Hau","title":"Schnittstellen"},"unlisted":false,"prevItem":{"title":"null-werte","permalink":"/blog/2023/10/24/null-werte"},"nextItem":{"title":"arbeitsauftrag","permalink":"/blog/2023/10/17/arbeitsauftrag"}},"content":"Eine **Schnittstelle** ist eine abstrakte Struktur, die definiert, welche *Methoden* und *Eigenschaften* eine Klasse implementieren muss, um bestimmte Funktionalitäten bereitzustellen. \r\n\r\nFakten zu Schnittstellen:\r\n- *Implementierende* Klassen müssen die in der **Schnittstelle** definierten Methoden und Eigenschaften bereitstellen\r\n- Erlauben die **Implementierung** durch mehrere Klassen, um Funktionalitäten aus verschiedenen Quellen zu kombinieren\r\n- Dienen zur Festlegung dessen, welche Methoden und Eigenschaften in *implementierenden* Klassen vorhanden sein müssen\r\n\r\n```cs\r\n    public interface IPerson\r\n    {\r\n        public string Firstname { get; set; }\r\n        public string Surname { get; set; }\r\n    }\r\n\r\n    public class Employee : IPerson, IPilot\r\n\r\n```\r\n:::Danger\r\nDurch **Interface** anstatt **class** kann man den Employee hier mit *IPerson* und *IPilot* verknüpfen, das ginge sonst nicht.\r\n:::"},{"id":"/2023/10/17/arbeitsauftrag","metadata":{"permalink":"/blog/2023/10/17/arbeitsauftrag","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-10-17-arbeitsauftrag.md","source":"@site/blog/2023-10-17-arbeitsauftrag.md","title":"arbeitsauftrag","description":"Was versteht man unter einem Projekt?","date":"2023-10-17T00:00:00.000Z","tags":[],"readingTime":1.36,"hasTruncateMarker":false,"authors":[{"name":"Marius Hau","key":null,"page":null}],"frontMatter":{"date":"2023-10-17T00:00:00.000Z","author":"Marius Hau","title":"arbeitsauftrag"},"unlisted":false,"prevItem":{"title":"Schnittstellen","permalink":"/blog/2023/10/26/schnittstellen"},"nextItem":{"title":"exceptions","permalink":"/blog/2023/09/19/exceptions"}},"content":"## Was versteht man unter einem Projekt?\r\n\r\nEin 'Projekt' istcv ein Vorhaben, das darauf abzielt, ein bestimmtes Ziel zu erreichen. Es umfasst eine geplante Abfolge von Aufgaben und Aktivitäten, die darauf ausgerichtet sind, ein spezifisches Ergebnis zu erzielen. Projekte werden in der Regel durchgeführt, um etwas Neues zu schaffen, zu verbessern oder zu ändern, sei es ein Produkt, eine Dienstleistung, eine Software oder eine andere Art von Lösung. \r\n\r\n \r\n\r\nEin typisches Projekt umfasst:\r\n\r\n   - Ein Ziel\r\n\r\n   - Einen zeitlichen Rahmen\r\n\r\n   - Ressourcen\r\n\r\n   - Aufgaben und Aktivitäten\r\n\r\n   - Risiken und Herausforderungen\r\n\r\n \r\n\r\nProjekte werden in vielen verschiedenen Bereichen durchgeführt, von Bauwesen und Technologie bis hin zu Gesundheitswesen und Kunst.\r\n\r\n \r\n\r\nBeispiele:\r\n\r\n   - Bau eines Wohnhauses\r\n\r\n     Ziel: Fertigstellung eines bewohnbaren Gebäudes\r\n\r\n     Aufgaben: Planung des Grundrisses, Beschaffung von Baumaterialien, Einstellung von Bauarbeitern, Errichtung des Gebäudes\r\n\r\n     Ressourcen: Baustoffe, Arbeitskräfte, Bauausrüstung, Finanzen\r\n\r\n \r\n\r\n   - Entwicklung einer E-Commerce-Website:\r\n\r\n     Ziel: Bereitstellung einer funktionierenden Online-Plattform für den Verkauf von Produkten\r\n\r\n     Aufgaben: Webdesign, Programmierung, Implementierung von Zahlungsgateways, Produktdatenbankverwaltung, Implementierung von Benutzerkonten und Einkaufswagen\r\n\r\n     Ressourcen: Webentwickler, Designer, Serverkapazität, Finanzen\r\n\r\n \r\n\r\n   - Forschungsprojekt zur Krebsbekämpfung:\r\n\r\n     Ziel: Entwicklung neuer Ansätze zur Behandlung von Krebserkrankungen\r\n\r\n     Aufgaben: Literaturrecherche, Laborexperimente, Datenauswertung, klinische Studien\r\n\r\n     Ressourcen: Wissenschaftler, Laboreinrichtungen, Forschungsgelder\r\n\r\n \r\n\r\n   - Organisation eines Musikfestivals:\r\n\r\n     Ziel: Durchführung eines erfolgreichen Musikfestivals mit mehreren Künstlern und Besuchern\r\n\r\n     Aufgaben: Buchung von Künstlern, Sicherheitsplanung, Standortauswahl, Marketing und Werbung, Ticketverkauf\r\n\r\n     Ressourcen: Künstler, Sicherheitspersonal, Veranstaltungsort, Marketingbudget\r\n\r\n \r\n\r\n   - Implementierung eines Unternehmens-EnterpriseResourcePlanning-Systems:\r\n\r\n     Ziel: Einführung eines integrierten Software-Systems zur Verwaltung von Geschäftsprozessen.\r\n\r\n     Aufgaben: Anforderungsanalyse, Auswahl der Software, Systemintegration, Schulung der Mitarbeiter, Datenmigration.\r\n\r\n     Ressourcen: ERP-Softwarelizenz, IT-Experten, Schulungsmaterialien.\r\n\r\n     \r\n\r\nDiese Beispiele illustrieren, wie Projekte in verschiedenen Bereichen auftreten und wie unterschiedlich sie sein können, sowohl in Bezug auf die Ziele als auch auf die benötigten Ressourcen und Aktivitäten."},{"id":"/2023/09/19/exceptions","metadata":{"permalink":"/blog/2023/09/19/exceptions","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-09-19-exceptions.md","source":"@site/blog/2023-09-19-exceptions.md","title":"exceptions","description":"Allgemeines","date":"2023-09-19T00:00:00.000Z","tags":[],"readingTime":2.08,"hasTruncateMarker":false,"authors":[{"name":"Marius Hau","key":null,"page":null}],"frontMatter":{"date":"2023-09-19T00:00:00.000Z","author":"Marius Hau","title":"exceptions"},"unlisted":false,"prevItem":{"title":"arbeitsauftrag","permalink":"/blog/2023/10/17/arbeitsauftrag"},"nextItem":{"title":"doku","permalink":"/blog/2023/09/15/apr-swpp"}},"content":"## Allgemeines\r\n\r\nSollte ein unvorhergesehenes Ergeignis auftreten, so wird eine *Exception* ausgelöst.\r\n\r\n## Keine Exception\r\n\r\nBei folgendem Beispiel wird keine Exception ausgelöst. Folgende Fälle werden berücksichtigt:\r\n\r\n- leere Eingabe\r\n- Texteingabe\r\n- Eingabe von Zahlen\r\n\r\n```cs\r\nConsole.Write(\"Username: \");\r\nstring username = Console.ReadLine();\r\nConsole.WriteLine($\"Username: {username}\");\r\n```\r\n\r\n## Exception bei der Umwandlung von Zeichenketten\r\n\r\nWird eine Zeichektte fehlerhaft in eine Zahl umgewandelt so tritt eine `Exception` auf.\r\n\r\n![Exception](//images/blog/exception-convert-string-to-int.png)\r\n\r\n## try und catch\r\n\r\nAusgelöste `Exceptions` können mittels `try` und `catch` bearbeitet werden.\r\n\r\n```cs\r\nConsole.Write(\"Zahl: \");\r\nstring eingabe = Console.ReadLine();\r\n\r\ntry\r\n{\r\n    int zahl = Convert.ToInt32(eingabe);\r\n    Console.WriteLine($\"Zahl: {zahl}\");\r\n}\r\ncatch (FormatException ex)\r\n{\r\n    Console.WriteLine(\"Es ist ein Fehler aufgetreten.\");\r\n    Console.WriteLine(ex.Message);\r\n}\r\n```\r\n\r\n::: danger\r\nDie Bearbeitung wird im `try`-Bereich bis zum Auftritt eines Fehlers versucht. Beim Auftreten eines Fehlers wird **sofort**\r\nin den `catch`-Bereich gewechselt.\r\n:::\r\n\r\nDurch die Angabe der genauen `Exception` kann gezielt auf den Fehler reagiert werden.\r\nMittel `ex.Message` kann die Fehlermeldung ausgelesen werden.\r\n\r\n## Mehrere catch-Bereiche\r\n\r\nFalls mehrere `catch`-Bereiche benötigt werden, können diese an die zuvor erstellten Blöcke gereiht werden.\r\n\r\n```cs\r\nConsole.Write(\"Position: \");\r\nstring eingabe = Console.ReadLine();\r\n\r\nint[] zahlen = { 17, 20, 15, 11, 9, 5, 0 };\r\n\r\ntry\r\n{\r\n    int position = Convert.ToInt32(eingabe);\r\n    Console.WriteLine($\"Zahl: {zahlen[position]}\");\r\n}\r\ncatch (FormatException ex)\r\n{\r\n    Console.WriteLine(\"Bitte kontrollieren Sie die eingegebene Zahl.\");\r\n    Console.WriteLine(ex.Message);\r\n}\r\ncatch (IndexOutOfRangeException)\r\n{\r\n    Console.WriteLine($\"Bitte geben Sie eine Zahl zwischen 0 und {zahlen.Length -1} ein.\");\r\n}\r\n```\r\nWird im `catch`-Bereich `Exception` angegeben, so handelt sich um die **Oberklasse** und diese berücksichtigt **alle** Exceptions.\r\n\r\n```cs\r\ne.Write(\"Position: \");\r\nstring eingabe = Console.ReadLine();\r\n\r\nint[] zahlen = { 17, 20, 15, 11, 9, 5, 0 };\r\n\r\ntry\r\n{\r\n    int position = Convert.ToInt32(eingabe);\r\n    Console.WriteLine($\"Zahl: {zahlen[position]}\");\r\n}\r\ncatch (FormatException ex)\r\n{\r\n    Console.WriteLine(\"Bitte kontrollieren Sie die eingegebene Zahl.\");\r\n    Console.WriteLine(ex.Message);\r\n}\r\ncatch (IndexOutOfRangeException)\r\n{\r\n    Console.WriteLine($\"Bitte geben Sie eine Zahl zwischen 0 und {zahlen.Length -1} ein.\");\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.WriteLine(ex.Message);\r\n}\r\n```\r\n\r\n## finally\r\n\r\nWird ein `finally`-Block verwendet so wird dieser **stets** aufgerufen. Dies bedeutet, dass der `finally`-Block sowohl bei einem Fehler\r\nals auch bei einer erfolgreichen Bearbeitung aufgerufen wird.\r\n\r\n```cs\r\nConsole.Write(\"Zahl: \");\r\nstring eingabe = Console.ReadLine();\r\n\r\ntry\r\n{\r\n    int zahl = Convert.ToInt32(eingabe);\r\n    Console.WriteLine($\"Zahl: {zahl}\");\r\n}\r\ncatch (FormatException ex)\r\n{\r\n    Console.WriteLine(\"Bitte kontrollieren Sie die eingegebene Zahl.\");\r\n    Console.WriteLine(ex.Message);\r\n}\r\nfinally\r\n{\r\n    Console.WriteLine(\"Vielen Dank!\"); \r\n}\r\n```\r\n\r\n## Eigene Exceptions erstellen\r\n\r\nEigene Exceptions können mittels `throw new Exception(\"Text der Nachricht\")` ausgelöst werden. Hierbei wird die Oberklasse `Exception` verwendet.\r\n\r\nMöchte man eine **eigene Exception** verwenden, so muss eine **Unterklasse** der Exception erstellt werden.\r\n\r\n:::tip\r\nVisual Studio erstellt den Inhalt der Unterklasse nach der Angabe der Vererbung automatisch. :wink: :100:\r\n:::"},{"id":"/2023/09/15/apr-swpp","metadata":{"permalink":"/blog/2023/09/15/apr-swpp","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-09-15-apr-swpp.md","source":"@site/blog/2023-09-15-apr-swpp.md","title":"doku","description":"","date":"2023-09-15T00:00:00.000Z","tags":[],"readingTime":0.005,"hasTruncateMarker":false,"authors":[{"name":"Marius Hau","title":"Schüler der HAK Zell am See","url":"https://github.com/mariushau01","page":{"permalink":"/blog/authors/mariushau-01"},"socials":{"github":"https://github.com/mariushau01"},"imageURL":"https://github.com/mariushau01.png","key":"mariushau01"}],"frontMatter":{"date":"2023-09-15T00:00:00.000Z","authors":"mariushau01","title":"doku"},"unlisted":false,"prevItem":{"title":"exceptions","permalink":"/blog/2023/09/19/exceptions"}},"content":"#"}]}}